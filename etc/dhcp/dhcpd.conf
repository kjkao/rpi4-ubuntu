#
# Sample configuration file for ISC dhcpd for Debian
#
# Attention: If /etc/ltsp/dhcpd.conf exists, that will be used as
# configuration file instead of this file.
#
#

# The ddns-updates-style parameter controls whether or not the server will
# attempt to do a DNS update when a lease is confirmed. We default to the
# behavior of the version 2 packages ('none', since DHCP v2 didn't
# have support for DDNS.)
ddns-update-style none;

# option definitions common to all supported networks...
option domain-name "kjkao.tw";
option domain-name-servers 168.95.1.1, 8.8.8.8;
#option routers 192.168.12.253;
option routers 192.168.12.1;

default-lease-time 86400;
max-lease-time 864000;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
#authoritative;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
log-facility local7;

# No service will be given on this subnet, but declaring it helps the 
# DHCP server to understand the network topology.

#subnet 10.152.187.0 netmask 255.255.255.0 {
#}

# This is a very basic subnet declaration.

#subnet 10.254.239.0 netmask 255.255.255.224 {
#  range 10.254.239.10 10.254.239.20;
#  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;
#}

# This declaration allows BOOTP clients to get dynamic addresses,
# which we don't really recommend.

#subnet 10.254.239.32 netmask 255.255.255.224 {
#  range dynamic-bootp 10.254.239.40 10.254.239.60;
#  option broadcast-address 10.254.239.31;
#  option routers rtr-239-32-1.example.org;
#}

# A slightly different configuration for an internal subnet.
#subnet 10.5.5.0 netmask 255.255.255.224 {
#  range 10.5.5.26 10.5.5.30;
#  option domain-name-servers ns1.internal.example.org;
#  option domain-name "internal.example.org";
#  option routers 10.5.5.1;
#  option broadcast-address 10.5.5.31;
#  default-lease-time 600;
#  max-lease-time 7200;
#}

# Hosts which require special configuration options can be listed in
# host statements.   If no address is specified, the address will be
# allocated dynamically (if possible), but the host-specific information
# will still come from the host declaration.

#host passacaglia {
#  hardware ethernet 0:0:c0:5d:bd:95;
#  filename "vmunix.passacaglia";
#  server-name "toccata.fugue.com";
#}

# Fixed IP addresses can also be specified for hosts.   These addresses
# should not also be listed as being available for dynamic assignment.
# Hosts for which fixed IP addresses have been specified can boot using
# BOOTP or DHCP.   Hosts for which no fixed address is specified can only
# be booted with DHCP, unless there is an address range on the subnet
# to which a BOOTP client is connected which has the dynamic-bootp flag
# set.
#host fantasia {
#  hardware ethernet 08:00:07:26:c0:a5;
#  fixed-address fantasia.fugue.com;
#}

# You can declare a class of clients and then do address allocation
# based on that.   The example below shows a case where all clients
# in a certain class get addresses on the 10.17.224/24 subnet, and all
# other clients get addresses on the 10.0.29/24 subnet.

#class "foo" {
#  match if substring (option vendor-class-identifier, 0, 4) = "SUNW";
#}

#shared-network 224-29 {
#  subnet 10.17.224.0 netmask 255.255.255.0 {
#    option routers rtr-224.example.org;
#  }
#  subnet 10.0.29.0 netmask 255.255.255.0 {
#    option routers rtr-29.example.org;
#  }
#  pool {
#    allow members of "foo";
#    range 10.17.224.10 10.17.224.250;
#  }
#  pool {
#    deny members of "foo";
#    range 10.0.29.10 10.0.29.230;
#  }
#}

subnet 192.168.12.0 netmask 255.255.255.0 {
  range 192.168.12.130 192.168.12.145;
  #option routers 192.168.12.254;
}

host msi {
  hardware ethernet 8c:89:a5:05:cf:38;
  fixed-address msi;
}

host msi-wifi {
  hardware ethernet 0C:D2:92:07:B2:9B;
  fixed-address msi-wifi;
}

host kjkao-bpi {
  hardware ethernet 02:d8:03:81:ac:e7;
  fixed-address kjkao-bpi;
}

host m10 {
  hardware ethernet ac:37:43:3c:0a:25;
  fixed-address m10;
}

host mibox {
  hardware ethernet 10:48:b1:02:37:dd;
  fixed-address mibox;
}

host mibox-wifi {
  hardware ethernet 98:3b:16:5f:79:75;
  fixed-address mibox-wifi;
}

host m9 {
  hardware ethernet 90:e7:c4:c9:4b:95;
  fixed-address m9;
}

host u11 {
  hardware ethernet 40:4e:36:19:3a:f4;
  fixed-address u11;
}

host nswitch {
  hardware ethernet 70:48:f7:22:c0:13;
  fixed-address nswitch;
}

host kj-i5-wifi {
  hardware ethernet 30:52:CB:4E:B0:CF;
  fixed-address kj-i5-wifi;
}

host kj-i5{
  hardware ethernet F0:76:1C:D1:26:B9;
  fixed-address kj-i5;
#  option routers 192.168.12.1;
}

host 49fx600-wifi {
  hardware ethernet d8:61:62:58:35:18;
  fixed-address 49fx600-wifi;
}

host pixel3 {
  hardware ethernet e6:48:e2:59:b1:b7;
  fixed-address pixel3;
}
